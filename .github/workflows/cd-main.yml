name: CD - Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch: # Allow manual trigger

env:
  AWS_REGION: eu-central-1
  ECR_REPOSITORY_BACKEND: bau-backend
  ECR_REPOSITORY_FRONTEND: bau-frontend
  ECS_CLUSTER: bau-cluster
  ECS_SERVICE_BACKEND: bau-backend
  ECS_SERVICE_FRONTEND: bau-frontend

jobs:
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    outputs:
      infrastructure-exists: ${{ steps.check-infrastructure.outputs.exists }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check if infrastructure exists
        id: check-infrastructure
        run: |
          if aws ecs describe-clusters --clusters $ECS_CLUSTER 2>/dev/null | grep -q "ACTIVE"; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "✅ Infrastructure already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "🏗️ Infrastructure needs to be deployed"
          fi

      - name: Setup OpenTofu
        if: steps.check-infrastructure.outputs.exists == 'false'
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: 1.9.1

      - name: Deploy infrastructure
        if: steps.check-infrastructure.outputs.exists == 'false'
        working-directory: infrastructure
        env:
          ALERT_EMAIL: ${{ secrets.BILLING_ALERT_EMAIL }}
        run: |
          echo "🚀 Deploying infrastructure..."
          tofu init
          tofu validate
          tofu plan -var-file=terraform.tfvars -var="alert_email=$ALERT_EMAIL"
          tofu apply -var-file=terraform.tfvars -var="alert_email=$ALERT_EMAIL" -auto-approve
          echo "✅ Infrastructure deployed successfully"

  build-and-deploy:
    name: Build and Deploy Applications
    runs-on: ubuntu-latest
    needs: deploy-infrastructure

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push backend image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Building backend image..."
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG ./backend
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest ./backend
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest
          echo "backend-image=$ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Build, tag, and push frontend image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Building frontend image..."
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG ./frontend
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest ./frontend
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest
          echo "frontend-image=$ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Deploy backend to ECS
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Deploying backend..."
          # Download current task definition
          aws ecs describe-task-definition --task-definition $ECR_REPOSITORY_BACKEND \
            --query taskDefinition > task-definition-backend.json
          
          # Update image in task definition
          jq --arg IMAGE "$ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG" \
            '.containerDefinitions[0].image = $IMAGE' \
            task-definition-backend.json > updated-task-definition-backend.json
          
          # Register new task definition
          aws ecs register-task-definition \
            --cli-input-json file://updated-task-definition-backend.json
          
          # Update service
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE_BACKEND \
            --task-definition $ECR_REPOSITORY_BACKEND \
            --force-new-deployment
          
          # Wait for deployment to complete
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE_BACKEND

      - name: Deploy frontend to ECS
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Deploying frontend..."
          # Download current task definition
          aws ecs describe-task-definition --task-definition $ECR_REPOSITORY_FRONTEND \
            --query taskDefinition > task-definition-frontend.json
          
          # Update image in task definition
          jq --arg IMAGE "$ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG" \
            '.containerDefinitions[0].image = $IMAGE' \
            task-definition-frontend.json > updated-task-definition-frontend.json
          
          # Register new task definition
          aws ecs register-task-definition \
            --cli-input-json file://updated-task-definition-frontend.json
          
          # Update service
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE_FRONTEND \
            --task-definition $ECR_REPOSITORY_FRONTEND \
            --force-new-deployment
          
          # Wait for deployment to complete
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE_FRONTEND

      - name: Health check
        run: |
          echo "Performing health checks..."
          # Wait a bit for services to fully start
          sleep 30
          
          # Get service endpoints (you'll need to replace with your actual URLs)
          echo "✅ Deployment completed successfully!"
          echo "Backend: Check ECS service logs for startup status"
          echo "Frontend: Check ECS service logs for startup status" 