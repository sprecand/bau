openapi: 3.0.3
info:
  title: Bau Platform API
  description: API for connecting construction companies with temporary workers
  version: 1.0.0
  contact:
    name: Bau Platform Team
    email: support@bau-platform.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.bau-platform.com/api/v1
    description: Production server
  - url: https://staging-api.bau-platform.com/api/v1
    description: Staging server
  - url: http://localhost:8080/api/v1
    description: Local development server

# Global security - can be overridden at operation level
security:
  - BearerAuth: []

# Import paths from separate files

# Import components from separate files
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token from AWS Cognito
  

  schemas:
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: Username or email address
          example: "john.doe@bau-ag-grabs.ch"
        password:
          type: string
          description: User password
          example: "SecurePassword123!"
    
    LoginResponse:
      type: object
      properties:
        accessToken:
          type: string
          description: JWT access token
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refreshToken:
          type: string
          description: JWT refresh token
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        idToken:
          type: string
          description: JWT ID token
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        expiresIn:
          type: integer
          description: Token expiration time in seconds
          example: 3600
        tokenType:
          type: string
          description: Token type
          example: "Bearer"
        user:
          $ref: '#/components/schemas/UserProfileResponse'
    
    UserProfileResponse:
      type: object
      properties:
        id:
          type: string
          description: User ID from Cognito
          example: "1234567890"
        username:
          type: string
          description: Username
          example: "john.doe@bau-ag-grabs.ch"
        email:
          type: string
          format: email
          description: Email address
          example: "john.doe@bau-ag-grabs.ch"
        betriebId:
          type: string
          format: uuid
          description: Company ID
          example: "123e4567-e89b-12d3-a456-426614174001"
        betriebName:
          type: string
          description: Company name
          example: "Bau AG Grabs"
        role:
          type: string
          enum: [ADMIN, BETRIEB]
          description: User role from Cognito groups
          example: "BETRIEB"
        emailVerified:
          type: boolean
          description: Email verification status
          example: true
        createdAt:
          type: string
          format: date-time
          description: Account creation timestamp
          example: "2024-01-15T10:30:00Z"
        lastLoginAt:
          type: string
          format: date-time
          description: Last login timestamp
          example: "2024-01-15T10:30:00Z" 
    BedarfResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier
          example: "123e4567-e89b-12d3-a456-426614174000"
        betriebId:
          type: string
          format: uuid
          description: Company ID
          example: "123e4567-e89b-12d3-a456-426614174001"
        betriebName:
          type: string
          description: Company name
          example: "Bau AG Grabs"
        holzbauAnzahl:
          type: integer
          format: int32
          description: Number of carpenters needed
          example: 2
        zimmermannAnzahl:
          type: integer
          format: int32
          description: Number of joiners needed
          example: 1
        datumVon:
          type: string
          format: date
          description: Start date
          example: "2024-02-01"
        datumBis:
          type: string
          format: date
          description: End date
          example: "2024-02-15"
        adresse:
          type: string
          description: Work location address
          example: "Dorfstrasse 1234, 9472 Grabs"
        mitWerkzeug:
          type: boolean
          description: Tools required
          example: true
        mitFahrzeug:
          type: boolean
          description: Vehicle required
          example: false
        status:
          type: string
          enum: [AKTIV, INACTIV, ABGESCHLOSSEN]
          description: Current status
          example: "AKTIV"
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2024-01-15T10:30:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2024-01-15T10:30:00Z"
    CreateBedarfRequest:
      type: object
      required:
        - holzbauAnzahl
        - zimmermannAnzahl
        - datumVon
        - datumBis
        - adresse
      properties:
        holzbauAnzahl:
          type: integer
          format: int32
          minimum: 0
          description: Number of carpenters needed
          example: 2
        zimmermannAnzahl:
          type: integer
          format: int32
          minimum: 0
          description: Number of joiners needed
          example: 1
        datumVon:
          type: string
          format: date
          description: Start date
          example: "2024-02-01"
        datumBis:
          type: string
          format: date
          description: End date
          example: "2024-02-15"
        adresse:
          type: string
          minLength: 1
          maxLength: 1000
          description: Work location address
          example: "Dorfstrasse 1234, 9472 Grabs"
        mitWerkzeug:
          type: boolean
          description: Tools required
          example: true
        mitFahrzeug:
          type: boolean
          description: Vehicle required
          example: false
    UpdateBedarfRequest:
      type: object
      properties:
        holzbauAnzahl:
          type: integer
          format: int32
          minimum: 0
          description: Number of carpenters needed
          example: 2
        zimmermannAnzahl:
          type: integer
          format: int32
          minimum: 0
          description: Number of joiners needed
          example: 1
        datumVon:
          type: string
          format: date
          description: Start date
          example: "2024-02-01"
        datumBis:
          type: string
          format: date
          description: End date
          example: "2024-02-15"
        adresse:
          type: string
          minLength: 1
          maxLength: 1000
          description: Work location address
          example: "Dorfstrasse 1234, 9472 Grabs"
        mitWerkzeug:
          type: boolean
          description: Tools required
          example: true
        mitFahrzeug:
          type: boolean
          description: Vehicle required
          example: false
    UpdateBedarfStatusRequest:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum: [AKTIV, INACTIV, ABGESCHLOSSEN]
          description: New status
          example: "ABGESCHLOSSEN"
    BedarfListResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/BedarfResponse'
        totalElements:
          type: integer
          format: int32
          description: Total number of elements
          example: 100
        totalPages:
          type: integer
          format: int32
          description: Total number of pages
          example: 5
        currentPage:
          type: integer
          format: int32
          description: Current page number (0-based)
          example: 0
        pageSize:
          type: integer
          format: int32
          description: Page size
          example: 20
        hasNext:
          type: boolean
          description: Has next page
          example: true
        hasPrevious:
          type: boolean
          description: Has previous page
          example: false 
    BetriebResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          description: Company name
          example: "Bau AG Grabs"
        adresse:
          type: string
          description: Company address
          example: "Dorfstrasse 1234, 9472 Grabs"
        email:
          type: string
          format: email
          description: Contact email
          example: "info@bau-ag-grabs.ch"
        telefon:
          type: string
          description: Contact phone number
          example: "+41 81 123 45 67"
        status:
          type: string
          enum: [AKTIV, INAKTIV]
          description: Current status
          example: "AKTIV"
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2024-01-15T10:30:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2024-01-15T10:30:00Z"
    CreateBetriebRequest:
      type: object
      required:
        - name
        - adresse
        - email
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
          description: Company name
          example: "Bau AG Grabs"
        adresse:
          type: string
          minLength: 1
          maxLength: 1000
          description: Company address
          example: "Dorfstrasse 1234, 9472 Grabs"
        email:
          type: string
          format: email
          description: Contact email
          example: "info@bau-ag-grabs.ch"
        telefon:
          type: string
          maxLength: 50
          description: Contact phone number
          example: "+41 81 123 45 67"
    UpdateBetriebRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
          description: Company name
          example: "Bau AG Grabs"
        adresse:
          type: string
          minLength: 1
          maxLength: 1000
          description: Company address
          example: "Dorfstrasse 1234, 9472 Grabs"
        email:
          type: string
          format: email
          description: Contact email
          example: "info@bau-ag-grabs.ch"
        telefon:
          type: string
          maxLength: 50
          description: Contact phone number
          example: "+41 81 123 45 67"
    UpdateBetriebStatusRequest:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum: [AKTIV, INAKTIV]
          description: New status
          example: "INAKTIV"
    BetriebListResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/BetriebResponse'
        totalElements:
          type: integer
          format: int32
          description: Total number of elements
          example: 100
        totalPages:
          type: integer
          format: int32
          description: Total number of pages
          example: 5
        currentPage:
          type: integer
          format: int32
          description: Current page number (0-based)
          example: 0
        pageSize:
          type: integer
          format: int32
          description: Page size
          example: 20
        hasNext:
          type: boolean
          description: Has next page
          example: true
        hasPrevious:
          type: boolean
          description: Has previous page
          example: false 
    ErrorResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          description: Error timestamp
          example: "2024-01-15T10:30:00Z"
        status:
          type: integer
          description: HTTP status code
          example: 400
        error:
          type: string
          description: Error type
          example: "Bad Request"
        message:
          type: string
          description: Error message
          example: "Validation failed"
        path:
          type: string
          description: Request path
          example: "/api/v1/bedarf"
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                description: Field name
                example: "datumVon"
              message:
                type: string
                description: Field-specific error message
                example: "Start date must be in the future"
    PaginationParameters:
      type: object
      properties:
        page:
          type: integer
          minimum: 1
          default: 1
          description: Page number (1-based)
        size:
          type: integer
          minimum: 1
          maximum: 100
          default: 20
          description: Page size
    PaginationResponse:
      type: object
      properties:
        totalElements:
          type: integer
          description: Total number of elements
          example: 100
        totalPages:
          type: integer
          description: Total number of pages
          example: 5
        currentPage:
          type: integer
          description: Current page number
          example: 1
        pageSize:
          type: integer
          description: Page size
          example: 20
        hasNext:
          type: boolean
          description: Has next page
          example: true
        hasPrevious:
          type: boolean
          description: Has previous page
          example: false 
    UserResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: User ID
          example: "123e4567-e89b-12d3-a456-426614174000"
        username:
          type: string
          description: Username
          example: "john.doe@bau-ag-grabs.ch"
        email:
          type: string
          format: email
          description: Email address
          example: "john.doe@bau-ag-grabs.ch"
        firstName:
          type: string
          description: First name
          example: "John"
        lastName:
          type: string
          description: Last name
          example: "Doe"
        betriebId:
          type: string
          format: uuid
          description: Company ID
          example: "123e4567-e89b-12d3-a456-426614174001"
        betriebName:
          type: string
          description: Company name
          example: "Bau AG Grabs"
        role:
          type: string
          enum: [ADMIN, BETRIEB]
          description: User role
          example: "BETRIEB"
        status:
          type: string
          enum: [AKTIV, INAKTIV]
          description: User status
          example: "AKTIV"
        emailVerified:
          type: boolean
          description: Email verification status
          example: true
        createdAt:
          type: string
          format: date-time
          description: Account creation timestamp
          example: "2024-01-15T10:30:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2024-01-15T10:30:00Z"
    CreateUserRequest:
      type: object
      required:
        - username
        - email
        - firstName
        - lastName
        - betriebId
        - role
      properties:
        username:
          type: string
          description: Username
          example: "john.doe@bau-ag-grabs.ch"
        email:
          type: string
          format: email
          description: Email address
          example: "john.doe@bau-ag-grabs.ch"
        firstName:
          type: string
          description: First name
          example: "John"
        lastName:
          type: string
          description: Last name
          example: "Doe"
        betriebId:
          type: string
          format: uuid
          description: Company ID
          example: "123e4567-e89b-12d3-a456-426614174001"
        role:
          type: string
          enum: [ADMIN, BETRIEB]
          description: User role
          example: "BETRIEB"
    UpdateUserRequest:
      type: object
      properties:
        username:
          type: string
          description: Username
          example: "john.doe@bau-ag-grabs.ch"
        email:
          type: string
          format: email
          description: Email address
          example: "john.doe@bau-ag-grabs.ch"
        firstName:
          type: string
          description: First name
          example: "John"
        lastName:
          type: string
          description: Last name
          example: "Doe"
        betriebId:
          type: string
          format: uuid
          description: Company ID
          example: "123e4567-e89b-12d3-a456-426614174001"
        role:
          type: string
          enum: [ADMIN, BETRIEB]
          description: User role
          example: "BETRIEB"
        status:
          type: string
          enum: [AKTIV, INAKTIV]
          description: User status
          example: "AKTIV"
    UpdateUserProfileRequest:
      type: object
      properties:
        firstName:
          type: string
          description: First name
          example: "John"
        lastName:
          type: string
          description: Last name
          example: "Doe"
        email:
          type: string
          format: email
          description: Email address
          example: "john.doe@bau-ag-grabs.ch"
    ChangePasswordRequest:
      type: object
      required:
        - currentPassword
        - newPassword
      properties:
        currentPassword:
          type: string
          description: Current password
          example: "oldPassword123"
        newPassword:
          type: string
          description: New password
          example: "newPassword123"
    UserListResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/UserResponse'
        totalElements:
          type: integer
          description: Total number of elements
          example: 100
        totalPages:
          type: integer
          description: Total number of pages
          example: 5
        currentPage:
          type: integer
          description: Current page number
          example: 1
        pageSize:
          type: integer
          description: Page size
          example: 20
        hasNext:
          type: boolean
          description: Has next page
          example: true
        hasPrevious:
          type: boolean
          description: Has previous page
          example: false 
paths:

  /auth/login:
    post:
      operationId: loginUser
      summary: User login
      description: Authenticate user with AWS Cognito
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Bad request - Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /auth/profile:
    get:
      operationId: getUserProfile
      summary: Get user profile
      description: Get the current user's profile information
      tags:
        - Authentication
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /auth/logout:
    post:
      operationId: logoutUser
      summary: Logout user
      description: Logout the current user (handled by AWS Cognito)
      tags:
        - Authentication
      responses:
        '200':
          description: Logout successful
        '401':
          description: Unauthorized 

  /bedarfe/betrieb/{betriebId}:
    get:
      operationId: getBedarfsByBetrieb
      summary: Get bedarfs by betrieb
      description: Retrieve all bedarfs for a specific betrieb (company)
      tags:
        - Bedarf
      parameters:
        - name: betriebId
          in: path
          required: true
          description: Betrieb ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of bedarfs for the betrieb
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BedarfResponse'
        '401':
          description: Unauthorized


  /bedarfe/{id}/status:
    patch:
      operationId: updateBedarfStatus
      summary: Update bedarf status
      description: Update the status of a bedarf
      tags:
        - Bedarf
      parameters:
        - name: id
          in: path
          required: true
          description: Bedarf ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBedarfStatusRequest'
      responses:
        '200':
          description: Bedarf status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BedarfResponse'
        '400':
          description: Invalid request data
        '401':
          description: Unauthorized
        '404':
          description: Bedarf not found


  /bedarfe/{id}:
    get:
      operationId: getBedarfById
      summary: Get bedarf by ID
      description: Retrieve a specific bedarf by its ID
      tags:
        - Bedarf
      parameters:
        - name: id
          in: path
          required: true
          description: Bedarf ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Bedarf details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BedarfResponse'
        '404':
          description: Bedarf not found
        '401':
          description: Unauthorized
  
    put:
      operationId: updateBedarf
      summary: Update bedarf
      description: Update an existing bedarf
      tags:
        - Bedarf
      parameters:
        - name: id
          in: path
          required: true
          description: Bedarf ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBedarfRequest'
      responses:
        '200':
          description: Bedarf updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BedarfResponse'
        '400':
          description: Invalid request data
        '401':
          description: Unauthorized
        '404':
          description: Bedarf not found
  
    delete:
      operationId: deleteBedarf
      summary: Delete bedarf
      description: Delete a bedarf by its ID
      tags:
        - Bedarf
      parameters:
        - name: id
          in: path
          required: true
          description: Bedarf ID
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Bedarf deleted successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions
        '404':
          description: Bedarf not found


  /bedarfe:
    get:
      summary: List all Bedarfe
      operationId: listBedarfe
      tags: [Bedarf]
      parameters:
        - name: page
          in: query
          description: Page number (0-based)
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Page size
          required: false
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: List of Bedarfe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BedarfListResponse'
    post:
      summary: Create a new Bedarf
      operationId: createBedarf
      tags: [Bedarf]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBedarfRequest'
      responses:
        '201':
          description: Bedarf created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BedarfResponse'
        '400':
          description: Invalid input 

  /betriebe/{id}/status:
    patch:
      operationId: updateBetriebStatus
      summary: Update betrieb status
      description: Update the status of a betrieb
      tags:
        - Betrieb
      parameters:
        - name: id
          in: path
          required: true
          description: Betrieb ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBetriebStatusRequest'
      responses:
        '200':
          description: Betrieb status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BetriebResponse'
        '400':
          description: Invalid request data
        '401':
          description: Unauthorized
        '404':
          description: Betrieb not found


  /betriebe/{id}:
    get:
      operationId: getBetriebById
      summary: Get betrieb by ID
      description: Retrieve a specific betrieb by its ID
      tags:
        - Betrieb
      parameters:
        - name: id
          in: path
          required: true
          description: Betrieb ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Betrieb details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BetriebResponse'
        '404':
          description: Betrieb not found
        '401':
          description: Unauthorized
  
    put:
      operationId: updateBetrieb
      summary: Update betrieb
      description: Update an existing betrieb
      tags:
        - Betrieb
      parameters:
        - name: id
          in: path
          required: true
          description: Betrieb ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBetriebRequest'
      responses:
        '200':
          description: Betrieb updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BetriebResponse'
        '400':
          description: Invalid request data
        '401':
          description: Unauthorized
        '404':
          description: Betrieb not found
  
    delete:
      operationId: deleteBetrieb
      summary: Delete betrieb
      description: Delete a betrieb by its ID
      tags:
        - Betrieb
      parameters:
        - name: id
          in: path
          required: true
          description: Betrieb ID
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Betrieb deleted successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions
        '404':
          description: Betrieb not found


  /betriebe:
    get:
      summary: List all Betriebe
      operationId: listBetriebe
      tags: [Betrieb]
      parameters:
        - name: page
          in: query
          description: Page number (0-based)
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Page size
          required: false
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: List of Betriebe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BetriebListResponse'
    post:
      summary: Create a new Betrieb
      operationId: createBetrieb
      tags: [Betrieb]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBetriebRequest'
      responses:
        '201':
          description: Betrieb created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BetriebResponse'
        '400':
          description: Invalid input 

  /users:
    get:
      operationId: getUsers
      summary: List users
      description: Get paginated list of users with optional filtering
      tags:
        - Users
      parameters:
        - name: page
          in: query
          description: Page number (1-based)
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: size
          in: query
          description: Page size
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: betriebId
          in: query
          description: Filter by company ID
          required: false
          schema:
            type: string
            format: uuid
        - name: role
          in: query
          description: Filter by role
          required: false
          schema:
            type: string
            enum: [ADMIN, BETRIEB]
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
        '401':
          description: Unauthorized
  
    post:
      operationId: createUser
      summary: Create new user
      description: Create a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions
  
  /users/{id}:
    get:
      operationId: getUserById
      summary: Get user by ID
      description: Retrieve a specific user by their ID
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found
        '401':
          description: Unauthorized
  
    put:
      operationId: updateUser
      summary: Update user
      description: Update an existing user
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid request data
        '401':
          description: Unauthorized
        '404':
          description: User not found
  
    delete:
      operationId: deleteUser
      summary: Delete user
      description: Delete a user by their ID
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: User deleted successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions
        '404':
          description: User not found
  
  /users/profile:
    get:
      operationId: getCurrentUserProfile
      summary: Get current user profile
      description: Get the profile for the currently authenticated user
      tags:
        - Users
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized
  
    put:
      operationId: updateCurrentUserProfile
      summary: Update current user profile
      description: Update the profile for the currently authenticated user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserProfileRequest'
      responses:
        '200':
          description: User profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid request data
        '401':
          description: Unauthorized
  
  /users/change-password:
    post:
      operationId: changePassword
      summary: Change password
      description: Change password for the currently authenticated user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '200':
          description: Password changed successfully
        '400':
          description: Invalid request data
        '401':
          description: Unauthorized 
