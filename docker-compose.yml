services:
  # PostgreSQL Database
  postgres:
    image: postgres:17
    container_name: bau-postgres
    environment:
      POSTGRES_DB: bau_dev
      POSTGRES_USER: bau_user
      POSTGRES_PASSWORD: bau_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/src/main/resources/db/migration:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bau_user -d bau_dev"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend Application (Development)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: bau-backend
    environment:
      SPRING_PROFILES_ACTIVE: local
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/bau_dev
      SPRING_DATASOURCE_USERNAME: bau_user
      SPRING_DATASOURCE_PASSWORD: bau_password
      AWS_COGNITO_USER_POOL_ID: local-pool
      AWS_COGNITO_CLIENT_ID: local-client
      AWS_REGION: eu-central-1
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend/src:/app/src
      - ./backend/target:/app/target
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend Application (Development)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: bau-frontend
    environment:
      NODE_ENV: development
    ports:
      - "4200:8080"
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/node_modules:/app/node_modules
    depends_on:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # SonarQube (Optional for local quality analysis)
  sonarqube:
    image: sonarqube:community
    container_name: bau-sonarqube
    environment:
      SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: true
    ports:
      - "9000:9000"
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_extensions:/opt/sonarqube/extensions
    profiles:
      - tools

  # Mailhog (Email testing)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: bau-mailhog
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    profiles:
      - tools

volumes:
  postgres_data:
  sonarqube_data:
  sonarqube_logs:
  sonarqube_extensions:

networks:
  default:
    name: bau-network 